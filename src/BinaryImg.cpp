
#include <iostream>
#include <unistd.h>
#include <emc/io.h>
#include <emc/rate.h>
#include <stdlib.h>
#include <cmath>
#include <string.h>
#include <fstream>
#include <sstream>
#include <ctime>


using namespace std;

#include <vector>
#include <map>
#include <limits>
#include <cassert>


////////////////

#define NUM_OF_DIRECTIONS       8

/// DIRECTIONS
static const int directions_x[NUM_OF_DIRECTIONS] = {0,1,1,1,0,-1,-1,-1};
static const int directions_y[NUM_OF_DIRECTIONS] = {-1,-1,0,1,1,1,0,-1};

// "Euristic"
float H(const std::pair<int, int> & a, const std::pair<int,int> & b)
{
  return std::sqrt( std::pow(a.first - b.first,2) + std::pow(a.second - b.second,2) );
}

bool find_path(std::vector< std::pair<int, int> > & out, const bool *wall, unsigned int width, unsigned int height, std::pair<int,int> start, std::pair<int,int> goal)
{
  assert (width>0 && height>0 && width<65536 && height<65536); // bounds
  assert (wall != 0 ); // invalid parameters

  float *g = new float[width * height]; // travel cost map
  int *path = new int[width * height];  // travelling directions map
  std::multimap<float, std::pair<int,int> > openset; // the open set
  float delta[NUM_OF_DIRECTIONS]; // precomputed traversing cost

  // precompute trasversing cost
  for(int i =0;i<NUM_OF_DIRECTIONS;++i)
    delta[i] = std::sqrt( directions_x[i]*directions_x[i] + directions_y[i]*directions_y[i] );

  // initialize path and g
  for(int i =0;i<width * height;++i)
  {
    //     g[i] = wall[i] ? 0.0f : std::numeric_limits<float>::max() // could be used as alternative
    g[i] = std::numeric_limits<float>::max(); //
    path[i] = -1;
  }

  // set the starting point
  g[ start.first + start.second * width] = 0.0;
  float f = H(start, goal);
  openset.insert (std::pair<float, std::pair<int,int> >(f, start));

  // iterate until openset is empty
  while(!openset.empty())
  {
    // get the element with lower f using multimap
    std::multimap<float, std::pair<int,int> >::iterator it=openset.begin();
    float f = it->first;
    std::pair<int,int> current = it->second;
    openset.erase(it);

    // is it the goal?
    if(current == goal)
    {
      // reconstruct path
      std::pair<int, int> cur = goal;
      out.push_back(cur);
      while(start != cur)
      {
        int d = path[cur.first + cur.second * width];
        if(d == -1)
        {
          // INTERNAL ERROR
          delete [] g;
          delete [] path;

          return false;
        }
        cur.first = d % width;
        cur.second = d / width;

        out.push_back( cur );
      }

      delete [] g;
      delete [] path;

      return true;
    }

    // search on neighbours
    for(int i=0;i<NUM_OF_DIRECTIONS;++i)
    {
      std::pair<int, int> n(current.first + directions_x[i], current.second + directions_y[i]);

      // evaluate point inside map and not walled
      if(n.first>=0 && n.second>=0 && n.first<width && n.second<height && (!wall[ n.first + n.second * width ]) )
      {
        // update travel cost (g)
        float t_g = g[current.first + current.second * width] + delta[i];

        if(t_g < g[n.first + n.second * width])
        {
          // compute expected cost to goal (f)
          float t_f = t_g + H(n, goal);
          g[n.first + n.second * width] = t_g; // update travel cost
          path[n.first + n.second * width] = current.first + current.second * width; // store coming path
          openset.insert (std::pair<float, std::pair<int,int> >(t_f, n)); // put this path on openset
        }

      }
    }



  }

  delete [] g;
  delete [] path;

  return false;

}



int main()
{
	int height;
	int width;
	int span;
	int max_x;
	int max_y;

	float res;
	int dist;
	int count;




	double angInc;

	//double lasdat[1000] = {2.72189,2.72422,2.7032,2.7003,2.69976,2.70466,2.69599,2.6946,2.68014,2.6747,2.66813,2.66168,2.67211,2.67177,2.66065,2.64382,2.651,2.63954,2.6454,2.63398,2.64125,2.63491,2.62313,2.6165,2.61116,2.61452,2.61836,2.61451,2.61025,2.60376,2.59899,2.59022,2.59116,2.59042,2.58373,2.58905,2.57808,2.56751,2.57619,2.57544,2.56405,2.57073,2.56803,2.55152,2.56225,2.55276,2.5437,2.54583,2.54905,2.54996,2.54473,2.53922,2.53773,2.52463,2.53632,2.53328,2.52728,2.52649,2.52324,2.51655,2.5128,2.50826,2.51623,2.51679,2.51483,2.51939,2.50851,2.49875,2.49587,2.49676,2.50927,2.49799,2.50849,2.50119,2.49625,2.50027,2.48623,2.49492,2.48373,2.49552,2.48769,2.49378,2.48253,2.49564,2.49101,2.4938,2.48616,2.47777,2.48197,2.47324,2.48028,2.4828,2.47156,2.48855,2.47358,2.48227,2.48568,2.48164,2.48234,2.48461,2.48313,2.478,2.47059,2.48117,2.47025,2.47937,2.4754,2.47184,2.47101,2.47716,2.46666,2.47923,2.47266,2.47206,2.47884,2.46871,2.47192,2.47205,2.47448,2.48279,2.47506,2.48535,2.47697,2.47873,2.48672,2.48404,2.47512,2.48711,2.48092,2.49322,2.48793,2.4807,2.48825,2.4959,2.47956,2.49646,2.49346,2.49334,2.48683,2.50311,2.48922,2.49224,2.50108,2.50057,2.5029,2.4984,2.5076,2.51294,2.50832,2.51966,2.513,2.52028,2.52151,2.52602,2.51459,2.52329,2.52456,2.52362,2.52366,2.53806,2.5287,2.5427,2.52908,2.54642,2.54719,2.53631,2.54959,2.54636,2.55432,2.56001,2.55195,2.56484,2.55235,2.57189,2.563,2.57151,2.56518,2.58408,2.57648,2.5598,2.53129,2.49914,2.45688,2.43051,2.40361,2.37054,2.33333,2.30803,2.27421,2.25713,2.22619,2.20284,2.17947,2.15451,2.128,2.10479,2.08823,2.05419,2.04685,2.01723,1.98777,1.97117,1.95316,1.92983,1.9113,1.90284,1.88639,1.85979,1.84843,1.82249,1.82149,1.79678,1.77289,1.7629,1.7442,1.72493,1.71256,1.70655,1.69112,1.67332,1.65791,1.63855,1.64375,1.63069,1.61146,1.59466,1.58233,1.56993,1.56193,1.54458,1.5444,1.52828,1.51522,1.49746,1.49799,1.48596,1.47889,1.46172,1.44145,1.441,1.43551,1.41151,1.40327,1.41048,1.39274,1.38174,1.36532,1.37054,1.34858,1.35149,1.3334,1.33026,1.32776,1.30859,1.30584,1.29734,1.29433,1.29201,1.28364,1.26494,1.25737,1.26071,1.25759,1.24845,1.22533,1.23385,1.2236,1.22416,1.20608,1.20597,1.19631,1.18282,1.1886,1.18046,1.16377,1.16127,1.15144,1.14748,1.13922,1.13633,1.14402,1.12629,1.12874,1.1223,1.11363,1.10144,1.1145,1.09071,1.10397,1.09631,1.08137,1.07449,1.07751,1.06668,1.05779,1.06472,1.04934,1.05704,1.05126,1.04446,1.0386,1.02964,1.03573,1.02195,1.03107,1.02659,1.01636,1.00162,0.999079,1.00639,0.994502,0.985315,1.00049,0.996566,0.986385,0.978267,0.967471,0.975588,0.968853,0.976426,0.961932,0.965241,0.950862,0.944246,0.941524,0.942997,0.94799,0.934518,0.928256,0.931991,0.936177,0.928456,0.927585,0.922159,0.924904,0.917349,0.911596,0.908201,0.909962,0.905667,0.89354,0.907316,0.897696,0.904561,0.898184,0.882111,0.884542,0.891011,0.886654,0.885907,0.883466,0.868092,0.87409,0.860666,0.862033,0.868628,0.859959,0.869563,0.865894,0.854132,0.850606,0.854222,0.857803,0.856435,0.837619,0.846906,0.840911,0.839237,0.847991,0.846586,0.843415,0.842809,0.837915,0.827829,0.836761,0.828136,0.824591,0.818539,0.818939,0.813565,0.809267,0.809697,0.811391,0.815507,0.804903,0.810327,0.803374,0.80641,0.803722,0.795357,0.808864,0.804857,0.802291,0.801538,0.798295,0.799023,0.789643,0.782467,0.78356,0.784948,0.778361,0.778251,0.780981,0.791425,0.783132,0.776676,0.780354,0.770354,0.779663,0.765536,0.771937,0.778702,0.76674,0.776548,0.769123,0.768229,0.765116,0.772371,0.756129,0.771922,0.77239,0.771212,0.764537,0.763959,0.763529,0.755095,0.75671,0.748347,0.754167,0.758286,0.752706,0.753315,0.758684,0.757176,0.749554,0.747938,0.741265,0.738596,0.748238,0.752116,0.736546,0.753798,0.745634,0.739279,0.747501,0.733057,0.746938,0.733161,0.747071,0.745794,0.748878,0.744309,0.742892,0.740325,0.736187,0.735333,0.74531,0.743752,0.735485,0.732218,0.7357,0.742759,0.740993,0.730723,0.737138,0.728602,0.737552,0.738117,0.72772,0.727108,0.732333,0.727135,0.724529,0.722332,0.731506,0.737838,0.721898,0.725643,0.718872,0.717506,0.720622,0.717572,0.732261,0.73457,0.729552,0.720688,0.722716,0.728235,0.71836,0.732656,0.735431,0.729547,0.7314,0.732895,0.717214,0.725942,0.719349,0.733055,0.722772,0.726195,0.719688,0.715018,0.733618,0.724869,0.718355,0.726469,0.724379,0.722241,0.734403,0.725836,0.722612,0.718159,0.726799,0.718509,0.716598,0.720441,0.723497,0.723814,0.733362,0.726718,0.721494,0.733969,0.721582,0.71834,0.732426,0.724463,0.730043,0.737619,0.723432,0.738789,0.729835,0.729178,0.73989,0.729548,0.740143,0.724331,0.742081,0.730554,0.732559,0.742416,0.742253,0.740955,0.726268,0.734643,0.74494,0.728217,0.740298,0.733502,0.736936,0.738393,0.74477,0.742785,0.73651,0.75028,0.744822,0.752392,0.737946,0.737803,0.75267,0.743749,0.738661,0.744261,0.754358,0.739646,0.754556,0.754888,0.743991,0.756267,0.744675,0.755374,0.757086,0.764898,0.753855,0.760422,0.75614,0.754912,0.764262,0.751555,0.763012,0.755265,0.763471,0.760748,0.770447,0.771796,0.76225,0.765883,0.774183,0.769558,0.772402,0.774911,0.780693,0.777766,0.785177,0.780345,0.781982,0.783566,0.778314,0.788291,0.781373,0.783738,0.78361,0.797585,0.786931,0.794913,0.794596,0.798786,0.804651,0.792784,0.80335,0.799742,0.799183,0.796996,0.809691,0.797842,0.816001,0.818133,0.808885,0.814296,0.810739,0.823258,0.810085,0.811201,0.819669,0.832767,0.827897,0.836831,0.830326,0.839001,0.836692,0.842034,0.831823,0.848118,0.846152,0.843985,0.846943,0.843325,0.843997,0.851451,0.854579,0.864413,0.866837,0.867967,0.854156,0.867801,0.875589,0.858426,0.872671,0.869662,0.876343,0.885445,0.87335,0.885232,0.893807,0.888516,0.891812,0.893814,0.895733,0.89078,0.899692,0.897518,0.896102,0.912976,0.905248,0.919996,0.912813,0.92613,0.915326,0.926857,0.925648,0.935969,0.935309,0.934476,0.943856,0.947289,0.937981,0.953005,0.957108,0.959854,0.969651,0.958192,0.967774,0.963182,0.981287,0.977098,0.984843,0.983846,0.979233,0.986445,0.998015,0.999806,1.00231,1.0099,1.00597,1.01812,1.0178,1.02401,1.02676,1.0329,1.02786,1.0466,1.04022,1.05165,1.04665,1.06672,1.05862,1.06131,1.07337,1.0663,1.08863,1.08735,1.08564,1.09435,1.10522,1.09833,1.11953,1.11478,1.1235,1.11664,1.13562,1.13239,1.14376,1.14165,1.16236,1.16612,1.17243,1.16905,1.1752,1.1804,1.17926,1.19642,1.19636,1.20479,1.20929,1.22009,1.2244,1.23655,1.24576,1.25777,1.25846,1.26555,1.27178,1.28621,1.27739,1.28982,1.29263,1.30023,1.32306,1.32969,1.32546,1.34226,2.54256,2.54955,2.54396,2.52258,2.52779,2.5229,2.51246,2.49805,2.49251,2.49498,2.49171,2.48,2.48471,2.47965,2.47235,2.4549,2.45542,2.45067,2.43847,2.43282,2.42819,2.43514,2.41675,2.41602,2.408,2.40492,2.40416,2.39124,2.38693,2.39396,2.38974,2.37551,2.37617,2.37293,2.36381,2.35611,2.35432,2.36104,2.34514,2.34394,2.33921,2.34603,2.33904,2.32488,2.33244,2.32389,2.31794,2.31162,2.30385,2.31116,2.3046,2.29755,2.2971,2.29737,2.29474,2.29137,2.2736,2.2752,2.28383,2.26661,2.28005,2.26921,2.30574,2.33574,2.3582,2.39954,2.42849,2.45584,2.49064,2.53047,2.56345,2.6004,2.63402,2.62584,2.6145,2.62051,2.60876,2.61538,2.61893,2.60323,2.60094,2.60165,2.60256,2.60344,2.58799,2.58981,2.5908,2.58101,2.58781,2.58077,2.57705,2.58054,2.58586,2.57854,2.56388,2.56276,2.56711,2.57095,2.56587,2.55286,2.56345,2.55735,2.56631,2.55451,2.54436,2.54506,2.54229,2.54337,2.55362,2.53729,2.5455,2.53624,2.54335,2.53517,2.54943,2.54369,2.53987,2.53763,2.54456,2.52995,2.54304,2.52857,2.53973,2.54037,2.54075,2.5394,2.52101,2.52781,2.5323,2.53079,2.52649,2.52346,2.51768,2.52413,2.53104,2.51683,2.52563,2.53139,2.51983,2.52042,2.53134,2.52943,2.52217,2.52156,2.5328,2.52107,2.51597,2.52458,2.53177,2.53471,2.52978,2.53109,2.52054,2.52773,2.53058,2.52129,2.52795,2.5332,2.53144,2.5233,2.5277,2.54227,2.53167,2.53084,2.53236,2.52913,2.53451,2.5452,2.54808,2.54219,2.53373,2.54775,2.54014,2.54455,2.53806,2.54174,2.55444,2.54283,2.55505,2.55484,2.54602,2.55314,2.55401,2.55438,2.56839,2.57177,2.56246,2.5627,2.57086,2.57929,2.57084,2.58282,2.58519,2.58548,2.57592,2.57905,2.59533,2.59031,2.58327,2.60151,2.58965,2.59315,2.60438,2.60383,2.61063,2.6142,2.61613,2.61439,2.62506,2.6179,2.61457,2.63502,2.63352,2.62957,2.62885,2.63978,2.63758,2.64589,2.65535,2.65957,2.65451,2.65369,2.668,2.66338,2.66089,2.66362,2.68008,2.67176,2.68734,2.69457,2.68226,2.70369,2.6921,2.70864,2.70712,2.71986,2.71747,2.71532,2.72371,2.72936,2.73735,2.73967,2.74298,2.74664,2.76212,2.76178,2.75339,2.76365,2.76854,2.78648};
	double lasdat[1000] = {0.979501,0.970192,0.971826,0.971726,0.962334,0.951968,0.947921,0.948876,0.940667,0.952679,0.937522,0.934111,0.930054,0.943079,0.922156,0.919732,0.922355,0.925254,0.918849,0.920895,0.912456,0.910099,0.898684,0.905125,0.902307,0.893595,0.905696,0.889113,0.897775,0.884792,0.894251,0.883882,0.885175,0.879811,0.872845,0.868208,0.875901,0.86827,0.867934,0.870723,0.858372,0.86611,0.848682,0.855432,0.859318,0.844053,0.851431,0.840957,0.851574,0.835497,0.849985,0.835046,0.839463,0.845353,0.839643,0.823997,0.823901,0.832986,0.823421,0.83462,0.813328,0.815796,0.819173,0.821691,0.821286,0.820157,0.820474,0.810168,0.803788,0.806121,0.800931,0.804501,0.796847,0.796478,0.809022,0.807452,0.793993,0.796064,0.786146,0.785405,0.793476,0.800099,0.78645,0.780945,0.795443,0.778047,0.778836,0.775154,0.788738,0.781836,0.771205,0.785328,0.782704,0.777238,0.775647,0.774364,0.769497,0.769929,0.760026,0.770446,0.774858,0.761393,0.756991,0.755337,0.763073,0.752766,0.751075,0.766866,0.760126,0.749992,0.766502,0.749274,0.747187,0.751452,0.750108,0.74389,0.752112,0.752893,0.744312,0.747421,0.742586,0.744643,0.743127,0.736903,0.754715,0.752811,0.746492,0.740609,0.740292,0.745211,0.750872,0.736076,0.748624,0.730961,0.735575,0.736907,0.72997,0.73391,0.732037,0.739348,0.734129,0.729724,0.740752,0.734376,0.735153,0.725739,0.734032,0.723904,0.736132,0.736689,0.730503,0.738713,0.722132,0.73522,0.737984,0.719978,0.731912,0.729095,0.725929,0.738256,0.721055,0.724234,0.722437,0.718442,0.724603,0.728051,0.726008,0.725837,0.733819,0.730484,0.718193,0.721512,0.734314,0.733583,0.731043,0.725128,0.715477,0.72171,0.726137,0.729169,0.716405,0.715077,0.726739,0.717802,0.729957,0.724767,0.718196,0.722644,0.734985,0.725584,0.722683,0.718135,0.732213,0.727803,0.719536,0.720039,0.71933,0.729262,0.729824,0.717314,0.724116,0.732582,0.723574,0.72335,0.731244,0.719843,0.73384,0.732207,0.727153,0.725678,0.727168,0.729428,0.726691,0.739899,0.733265,0.722715,0.730754,0.737558,0.731453,0.731819,0.729196,0.740154,0.735923,0.727318,0.733794,0.741214,0.733016,0.738676,0.73591,0.728145,0.741154,0.745038,0.745574,0.749398,0.73287,0.741101,0.733314,0.75056,0.736924,0.743837,0.73935,0.746934,0.735825,0.748308,0.748794,0.750735,0.75234,0.740524,0.748916,0.744052,0.752225,0.757606,0.763299,0.746829,0.763179,0.75491,0.765411,0.753102,0.75002,0.757269,0.756696,0.766113,0.756721,0.756149,0.768842,0.762362,0.769448,0.773768,0.763935,0.776773,0.767381,0.772425,0.772197,0.771033,0.767884,0.767453,0.787529,0.785268,0.772294,0.780019,0.792139,0.786569,0.778893,0.79591,0.793061,0.780912,0.788823,0.795625,0.790302,0.794253,0.78741,0.800608,0.793054,0.795885,0.807561,0.811736,0.807108,0.804876,0.812363,0.81688,0.806448,0.82349,0.811982,0.820239,0.81502,0.819247,0.825944,0.819656,0.820463,0.833009,0.833253,0.824971,0.830723,0.842051,0.829528,0.831159,0.849047,0.843128,0.850236,0.841461,0.858135,0.857025,0.860055,0.847765,0.848059,0.861319,0.871741,0.865925,0.875453,0.871844,0.869008,0.866549,0.878409,0.882471,0.886657,0.891666,0.878306,0.887518,0.884548,0.890284,0.890311,0.905836,0.901518,0.905505,0.910544,0.911869,0.915632,0.916682,0.91019,0.919139,0.929472,0.917688,0.923541,0.934892,0.928786,0.932876,0.935407,0.93762,0.953767,0.943674,0.960101,0.951212,0.956434,0.96247,0.975366,0.962473,0.97119,0.968371,0.982309,0.985648,0.986131,0.997634,0.994008,1.00765,1.0006,0.999436,1.0118,1.02588,1.0231,1.02628,1.02658,1.03139,1.04,1.04334,1.03664,1.05627,1.06078,1.05367,1.07253,1.07018,1.06993,1.08214,1.08778,1.0896,1.08465,1.09996,1.10563,1.1061,1.11525,1.11148,1.13188,1.11806,1.1423,1.13554,1.1518,1.14536,1.15378,1.1587,1.1626,1.16446,1.16873,1.18905,1.19179,1.20071,1.20035,1.21234,1.21677,1.21677,1.23743,1.23647,1.2498,1.24586,1.25268,1.26719,1.28054,1.27784,1.28303,1.29736,1.31039,1.31992,1.32562,1.33412,1.32485,2.56151,2.54317,2.54997,2.52811,2.5327,2.51887,2.51526,2.51599,2.50064,2.49147,2.48897,2.49649,2.48082,2.48408,2.46971,2.46763,2.46504,2.44311,2.44766,2.43433,2.43233,2.42438,2.4173,2.42538,2.41531,2.41512,2.40868,2.40048,2.39821,2.39237,2.38688,2.38135,2.38386,2.37179,2.37094,2.36452,2.36501,2.36688,2.34744,2.33875,2.33757,2.34168,2.34648,2.33553,2.32874,2.32494,2.31762,2.31388,2.31373,2.31647,2.30485,2.30807,2.3082,2.29476,2.29127,2.28645,2.2779,2.27299,2.28494,2.27901,2.27311,2.26436,2.28084,2.31295,2.34824,2.37744,2.40975,2.4322,2.46996,2.50958,2.53014,2.57357,2.60422,2.63657,2.62076,2.61012,2.62315,2.61877,2.60829,2.60501,2.60718,2.60882,2.59247,2.59843,2.59022,2.59394,2.59859,2.5853,2.58752,2.58749,2.59159,2.5712,2.58564,2.56621,2.57024,2.57156,2.57216,2.55857,2.57159,2.55836,2.57192,2.55211,2.56797,2.55685,2.55302,2.55098,2.55227,2.54447,2.54102,2.55473,2.54653,2.54806,2.54619,2.54435,2.53451,2.54706,2.53152,2.52887,2.53061,2.53974,2.53946,2.52765,2.53869,2.53511,2.52608,2.52333,2.5232,2.53685,2.52254,2.53742,2.5198,2.52095,2.51789,2.51794,2.52974,2.52458,2.52427,2.51901,2.52766,2.52546,2.51543,2.51735,2.51811,2.5276,2.52904,2.52127,2.52457,2.53169,2.52245,2.52864,2.52599,2.51752,2.53292,2.52228,2.53117,2.51844,2.52589,2.53546,2.53715,2.53102,2.53617,2.54088,2.53651,2.53916,2.52445,2.53237,2.53031,2.5357,2.53872,2.54563,2.5491,2.54234,2.55138,2.53578,2.53863,2.54919,2.54586,2.55203,2.54966,2.55702,2.54925,2.56408,2.56277,2.55017,2.55408,2.56134,2.55565,2.56661,2.56301,2.57853,2.56284,2.56383,2.58345,2.58276,2.58571,2.5899,2.57636,2.57646,2.58519,2.59378,2.59987,2.5911,2.59193,2.606,2.60053,2.60309,2.60654,2.61653,2.62399,2.62378,2.61979,2.61811,2.63129,2.62452,2.62874,2.64427,2.64318,2.64006,2.64488,2.63846,2.6491,2.65642,2.64914,2.6575,2.66218,2.67588,2.6664,2.67548,2.68715,2.68424,2.67971,2.69521,2.70124,2.6952,2.70239,2.70052,2.71456,2.72267,2.72823,2.72711,2.73234,2.7312,2.74565,2.74126,2.7505,2.74626,2.75446,2.75961,2.76921,2.77913,2.77472,2.79176,2.78576,2.79078,2.79284,2.80813,2.8034,2.81249,2.8133,2.83665,2.83918,2.83176,2.84685,2.85161,2.85427,2.87264,2.87156,2.88423,2.88664,2.88698,2.89434,2.89773,2.91262,2.91007,2.92466,2.92431,2.93299,2.95118,2.95133,2.9649,2.96823,2.97915,2.98487,2.97724,2.98817,2.99087,3.01339,3.01439,3.02092,3.03891,3.03787,3.04146,3.0665,3.07496,3.07764,3.07962,3.10065,3.09639,3.1051,3.12253,3.13253,3.14246,3.13707,3.15566,3.15668,3.17943,3.19116,3.19427,3.20854,3.21369,3.22354,3.23425,3.24334,3.25186,3.2678,3.2806,3.28451,3.29558,3.30193,3.32481,3.32623,3.34381,3.36247,3.36103,3.37908,3.39235,3.40471,3.41553,3.43618,3.44881,3.44851,3.47051,3.48433,3.4898,3.50146,3.52726,3.52633,3.54049,3.56004,3.58394,3.59368,3.61343,3.61825,3.6272,3.64547,3.65612,3.68765,3.69948,3.71075,3.73805,3.74206,3.76394,3.77787,3.78948,3.81872,3.83938,3.85281,3.86284,3.8826,3.90483,3.9155,3.94285,3.95482,3.9869,3.98717,4.0181,4.04314,4.0495,4.08145,4.09275,4.12955,4.13763,4.15491,4.1826,4.20553,4.22681,4.25072,4.27058,4.30891,4.32913,4.34116,4.36819,4.39477,4.42504,4.44781,4.46756,4.50222,4.52195,4.55505,4.5726,4.61747,4.64396,4.67134,4.69045,4.73107,4.76054,4.79219,4.81921,4.85617,4.88065,4.91962,4.95377,4.98647,5.02261,5.04408,5.07909,5.1156,5.1598,5.19321,5.22631,5.2687,5.31183,5.34934,5.3954,5.42557,5.4823,5.52425,5.5649,5.59685,5.64705,5.70005,5.73134,5.78213,5.83626,5.88003,5.92445,5.86857,5.85334,5.85287,5.83283,5.83039,5.81667,5.81806,5.79507,5.78369,5.77219,5.76927,5.75889,5.75548,5.74927,5.73463,5.71563,5.71391,5.69748,5.70454,5.69229,5.67118,5.67803,5.66351,5.65065,5.64323,5.6364,5.62868,5.62504,5.62445,5.6117,5.60274,5.58768,5.59091,5.57255,5.56838,5.55996,5.55855,5.5463,5.54529,5.54277,5.52917,5.53527,5.51225,5.52501,5.51453,5.50641,5.48956,5.48663,5.49123,5.49047,5.48421,5.47648,5.47127,5.45904,5.4469,5.44259,5.45175,5.43999,5.44003,5.43647,5.41973,5.41847,5.42739,5.42132,5.40902,5.40099,5.41361,5.40691,5.39352,5.39193,5.3894,5.389,5.37998,5.38081,5.37944,5.36612,5.36489,5.37264,5.36227,5.3714,5.36407,5.353,5.35988,5.3527,5.35469,5.35461,5.3482,5.34433,5.33739,5.33582,5.33308,5.334,5.33569,5.32629,5.32547,5.33909,5.32579,5.32163,5.33251,5.32969,5.32771,5.31973,5.3201,5.33261,5.32886,5.33117,5.3336,5.33176,5.32486,5.31988,5.33004,5.3186,5.32524,5.32489,5.32879,5.31985,5.32177,5.32152,5.33088,5.32793,5.32811,5.33664,5.33645,5.34005,5.34083,5.34137,5.34008,5.34896,5.34665,5.33746,5.34466,5.34143,5.34521,5.35367,5.34374,5.36449,5.35589,5.36892,5.36829,5.37316,5.3615};
	//double lasdat[1000] = {4.3386,4.3174,4.32517,4.31638,4.30444,4.30139,4.29184,4.28228,4.27199,4.27259,4.2694,4.24581,4.24109,4.24848,4.22836,4.23505,4.21622,4.20814,4.21249,4.20625,4.19421,4.19857,4.18078,4.17451,4.18596,4.18064,4.17698,4.15914,4.15834,4.15336,4.14482,4.14222,4.14363,4.13036,4.12638,4.12316,4.11405,4.10764,4.1019,4.10944,4.11048,4.1083,4.09893,4.08182,4.09354,4.09045,4.08635,4.08548,4.08045,4.06677,4.06564,4.05446,4.05095,4.05776,4.04597,4.05948,4.04645,4.0364,4.03739,4.0288,4.03894,4.03647,4.03029,4.02676,4.01588,4.03049,4.02844,4.01306,4.02581,4.02248,4.01904,4.01715,4.01589,4.00725,4.01234,4.00682,3.99904,4.00392,4.00133,3.99225,3.98712,3.98698,3.99025,3.98505,3.99511,3.98989,3.98144,3.98163,3.98947,3.98503,3.9796,3.98047,3.97639,3.98753,3.98756,3.97521,3.98352,3.98398,3.97868,3.98209,3.9815,3.97498,8.5787,8.57906,8.58611,8.5771,8.57405,8.57536,8.59321,8.58948,8.58357,8.59806,8.59592,8.59493,8.58582,8.59526,8.59052,8.59435,8.60532,8.60968,8.61028,8.61696,8.60327,8.6208,8.61958,8.6268,8.63282,8.62066,8.62905,8.6304,8.64223,8.65054,8.64581,8.66169,8.65056,8.65296,7.32337,7.12265,6.93041,6.76884,6.59348,6.42195,6.27929,6.12418,5.99222,5.83932,5.71098,5.5902,5.47574,5.37177,5.26764,5.16503,5.05801,4.96956,4.87302,4.77252,4.69829,4.61406,4.52705,4.46621,4.38776,4.31642,4.24723,4.16686,4.11374,4.12314,4.11171,4.12972,4.1391,4.12612,4.14323,4.14867,4.14704,4.15643,4.15432,4.16144,4.17226,4.17017,4.17927,4.19318,4.19977,4.1928,4.20782,4.20706,4.20745,4.21814,4.1983,4.15717,4.11427,4.0635,4.02129,3.97697,3.92932,3.88991,3.8549,3.82155,3.76898,3.74069,3.70336,3.65801,3.63444,3.59178,3.56928,3.52135,3.50521,3.45759,3.43364,3.40504,3.37192,3.35354,3.31518,3.28485,3.25557,3.22818,3.21292,3.17973,3.15861,3.12632,3.10018,3.08321,3.06611,3.04265,3.00525,2.98339,2.96245,2.95105,2.91595,2.90169,2.8804,2.86555,2.84274,2.81391,2.7917,2.78095,2.75806,2.75289,2.72706,2.7121,2.6896,2.6813,2.65803,2.64666,2.61698,2.61281,2.58193,2.56434,2.55383,2.54819,2.52421,2.51299,2.49536,2.47881,2.46824,2.45691,2.44178,2.43316,2.41292,2.40481,2.38368,2.36353,2.36162,2.33835,2.32973,2.32563,2.31132,2.29919,2.289,2.26764,2.25904,2.24454,2.2328,2.23856,2.21006,2.20576,2.20419,2.18141,2.17586,2.1599,2.14734,2.15345,2.14166,2.12666,2.11119,2.10358,2.09178,2.09551,2.07341,2.0753,2.06466,2.05496,2.05006,2.03069,2.03072,2.01001,2.01917,1.99735,1.99682,1.98792,1.97672,1.97939,1.96766,1.95623,1.95601,1.94699,1.92231,1.93144,1.91041,1.91082,1.89449,1.89126,1.88802,1.89001,1.88176,1.87289,1.857,1.84656,1.85091,1.84228,1.84299,1.82585,1.81655,1.82127,1.81356,1.81299,1.80561,1.79555,1.78156,1.78192,1.77116,1.77406,1.76509,1.7705,1.74978,1.74831,1.75231,1.73445,1.72956,1.73989,1.72971,1.71567,1.70988,1.70348,1.69837,1.71119,1.7027,1.68841,1.69742,1.67983,1.68338,1.6795,1.67109,1.6716,1.65863,1.64863,1.65462,1.64024,1.64608,1.64392,1.63568,1.63647,1.62286,1.63124,1.62295,1.61408,1.60638,1.60743,1.60597,1.59859,1.59513,1.5886,1.59223,1.58796,1.57995,1.58335,1.57673,1.58499,1.57881,1.56586,1.56114,1.56306,1.57074,1.56207,1.54891,1.54797,1.5536,1.55068,1.53957,1.53521,1.53424,1.53896,1.53942,1.52881,1.52584,1.52189,1.52626,1.51938,1.52025,1.50686,1.51628,1.51731,1.50098,1.49757,1.49784,1.49696,1.50037,1.49741,1.48813,1.48866,1.49601,1.48524,1.49088,1.48907,1.47274,1.4883,1.46858,1.48088,1.47649,1.46859,1.47943,1.47693,1.45658,1.47066,1.46031,1.4597,1.45253,1.4492,1.46434,1.46061,1.44646,1.45353,1.45333,1.44529,1.45138,1.45385,1.44729,1.43912,1.44093,1.44736,1.44195,1.43333,1.43116,1.43355,1.42522,1.42881,1.42881,1.4228,1.42069,1.43828,1.42631,1.41695,1.43392,1.42346,1.43001,1.41843,1.42913,1.43026,1.41707,1.4246,1.42367,1.41796,1.41417,1.41462,1.42243,1.40627,1.4107,1.41342,1.41054,1.41821,1.40875,1.40184,1.40224,1.41194,1.40871,1.40206,1.41659,1.4146,1.40313,1.41673,1.41347,1.41116,1.3965,1.41128,1.39956,1.41248,1.39668,1.39665,1.41164,1.40359,1.412,1.40694,1.41404,1.39949,1.39571,1.4114,1.40146,1.40284,1.40198,1.40985,1.39957,1.4099,1.41149,1.40221,1.40283,1.40175,1.40635,1.40201,1.39943,1.41303,1.40273,1.39731,1.409,1.40441,1.41413,1.41443,1.40307,1.41727,1.41781,1.40168,1.40805,1.41718,1.41618,1.4098,1.40452,1.41983,1.40922,1.41406,1.4108,1.41935,1.41205,1.41848,1.41731,1.41153,1.42859,1.42792,1.42092,1.42242,1.41722,1.42744,1.42231,1.42656,1.43108,1.43735,1.43669,1.43058,1.4368,1.44438,1.43207,1.43839,1.42939,1.44298,1.43793,1.44741,1.43407,1.44317,1.44736,1.44281,1.45611,1.45638,1.45969,1.44498,1.45096,1.45235,1.45108,1.45333,1.45321,1.4641,1.46698,1.46077,1.46095,1.47777,1.47484,1.47855,1.48063,1.47599,1.47254,1.47975,1.48159,1.48469,1.49705,1.48871,1.48419,1.49028,1.49015,1.491,1.50488,1.50761,1.50255,1.50834,1.50994,1.50674,1.51637,1.52245,1.51913,1.52595,1.53271,1.52768,1.52376,1.53176,1.53883,1.53341,1.53649,1.53888,1.55538,1.55873,1.55464,1.56582,1.55448,1.57031,1.56264,1.56168,1.56716,1.57292,1.57598,1.57923,1.58373,1.59851,1.6023,1.59952,1.59784,1.60095,1.61266,1.61827,1.6051,1.61108,1.62107,1.63219,1.63064,1.63419,1.63074,1.63367,1.64917,1.64612,1.64875,1.65802,1.65556,1.67129,1.66891,1.67224,1.6809,1.68791,1.6873,1.69842,1.68815,1.70752,1.69877,1.70983,1.72078,1.71259,1.71759,1.72355,1.73512,1.74844,1.73658,1.7515,1.74729,1.76188,1.76432,1.77493,1.76938,1.78465,1.79443,1.80058,1.80896,1.79746,1.80894,1.81087,1.83109,1.83611,1.83725,1.84195,1.84977,1.84604,1.85756,1.87074,1.88197,1.88028,1.88001,1.89763,1.90314,1.90321,1.92207,1.91439,1.92295,1.94508,1.94738,1.94675,1.95842,1.95807,1.98288,1.98379,1.99343,2.00269,2.00435,2.01692,2.02916,2.03672,2.04558,2.05233,2.05914,2.0633,2.06885,2.07751,2.0919,2.10287,2.11853,2.11791,2.14088,2.14987,2.16041,2.16235,2.1648,2.18751,2.195,2.19917,2.21709,2.21988,2.23633,2.23875,2.25395,2.26787,2.28378,2.30111,2.29669,2.32657,2.3287,2.34865,2.35813,2.36107,2.37962,2.38766,2.40641,2.42206,2.43021,2.4547,2.47256,2.4875,2.5024,2.51415,2.49617,2.49047,2.47278,2.4783,2.46519,2.46473,2.44402,2.43829,2.42994,2.43485,2.42056,2.41629,2.42383,2.41402,2.39548,2.40685,2.39499,2.38649,2.38555,2.37075,2.37257,2.35739,2.35765,2.34505,2.35218,2.34703,2.34519,2.33623,2.33188,2.33058,2.3188,2.31439,2.31421,2.31146,2.29923,2.29253,2.29583,2.28933,2.28326,2.2845,2.26913,2.27492,2.25798,2.25616,2.25809,2.24848,2.24385,2.23967,2.24724,2.24728,2.23384,2.22872,2.219,2.23118,2.21878,2.22142,2.21364,2.20451,2.20325,2.19612,2.21063,2.20248,2.19576,2.19486,2.18867,2.19439,2.19139,2.17305,2.17676,2.17212,2.17942,2.17209,2.15753,2.1721,2.16714,2.15863,2.14767,2.1621,2.15338,2.15392,2.15226,2.13392,2.13312,2.14548,2.143,2.13343,2.13201,2.1253,2.13008,2.13086,2.12041,2.12306,2.119,2.1251,2.11007,2.12299,2.11795,2.103,2.10063,2.1023,2.10567,2.11351,2.11073,2.10237,2.10758,2.10258,2.08842,2.10533,2.09738,2.09708,2.09709,2.08998,2.09381,2.09544,2.08307,2.08677,2.08113,2.08961,2.08883,2.09016,2.08156,2.07245,2.07851,2.08788,2.08687,2.07986,2.08408,2.07992,2.07981,2.08347,2.08275,2.06776,2.08097,2.07913,2.07741,2.07742,2.07214,2.07778,2.07621,2.06442,2.07118,2.071,2.07345,2.06536,2.06807,2.0594,2.07622,2.07446,2.0754,2.07255,2.07319,2.06658,2.07561,2.06328,2.06697,2.07589,2.07742,2.06616,2.07172,2.0739,2.06704,2.07258,2.08043,2.0674,2.0717,2.07839,2.06591,2.06542,2.07822,2.0846,2.07272,2.07265,2.07917,2.07005,2.08214,2.07161,2.07402,2.0831,2.09095,2.09439,2.08069,2.08922,2.08605,2.08135,2.09749,2.09791,2.10201,2.09951,2.08848,2.0979,2.09733,2.09914,2.09377,2.10069,2.10909,2.10758,2.10074,2.11616,2.11365,2.11903,2.12025,2.12523,2.10988,2.11693,2.13206,2.12805,2.12377,2.12048,2.12469,2.12737,2.1266,2.13615,2.14635,2.14139,2.14517,2.15042,2.14473,2.15144,2.153,2.15505,2.14991,2.16958,2.1721,2.16022,2.1654,2.17486,2.18,2.17681,2.18015,2.18118,2.18176,2.18465,2.18896,2.19246,2.20062,2.19827,2.19591,2.21791,2.21036,2.21025,2.21294,2.22258,2.22995,2.22075,2.22328,2.23225,2.24607,2.24066,2.25404,2.24709,2.26135,2.26718,2.25744,2.27173,2.26313,2.276,2.27714,2.29103,2.29801,2.29975,2.29188,2.29663};

	//span = scan.ranges.size();

	span = 1000;

	dist = 0;

	count = 0;


	int x[span] = {};

	int y[span] = {};

    res = 0.5;

	angInc = 4.0/999;

	max_x = 0;
	max_y = 0;

	for (int i=0;i<span;i++)
	{
		//x[i] = static_cast<int>(round(scan.ranges[i]*cos(angInc*i)/res));
		//y[i] = static_cast<int>(round(scan.ranges[i]*sin(angInc*i)/res));

		x[i] = round(lasdat[i]*cos((-2+angInc*i))/res);

		// std::cout << x[i] << endl;

		y[i] = round(lasdat[i]*sin((-2+angInc*i))/res);

		// std::cout << y[i] << endl;

		if(abs(x[i])>max_x)
		{
				max_x = abs(x[i]);
		}

		if(abs(y[i])>max_y)
		{
				max_y = abs(y[i]);
		}

		if(lasdat[i]>dist)
		{
				dist = lasdat[i];
				count = i;
		}



	}

	

    height = 2*max_x-1;
	width =  2*max_y-1;


    std::cout << "\n";
    std::cout<< "Height = " << height+2 << endl;
    std::cout<< "Width = " << width+2 << endl;
    std::cout << "\n";
    std::cout << "Map from LRF :";
    std::cout << "\n";


    int** zp = new int*[height+2];
	for(int i = 0; i < height+2; ++i)
        {
            zp[i] = new int[width+2];
        }

	
    std::fill(zp[0], zp[0] + (height+2) * (width+2), 0);

    char map[height+2][width+2];

    for (int i = 0; i < height+2; i++)
    {
        for (int j = 0; j < width+2; j++)
        {

            map[i][j] = '.';

        }
    }



	for (int i=0;i<span;i++)
	{
        zp[(x[i]+height/2)-1][(y[i]+width/2)-1] = 1;
		zp[(x[i]+height/2)-1][(y[i]+width/2)] = 1;
		zp[(x[i]+height/2)-1][(y[i]+width/2)+1] = 1;
		zp[(x[i]+height/2)+1][(y[i]+width/2)-1] = 1;
		zp[(x[i]+height/2)+1][(y[i]+width/2)] = 1;
		zp[(x[i]+height/2)+1][(y[i]+width/2)+1] = 1;
		zp[(x[i]+height/2)][(y[i]+width/2)-1] = 1;
		zp[(x[i]+height/2)][(y[i]+width/2)+1] = 1;


        zp[(x[i]+height/2)][(y[i]+width/2)] = '#';

        map[(x[i]+height/2)-1][(y[i]+width/2)-1] = '#';
        map[(x[i]+height/2)-1][(y[i]+width/2)] = '#';
        map[(x[i]+height/2)-1][(y[i]+width/2)+1] = '#';
        map[(x[i]+height/2)+1][(y[i]+width/2)-1] = '#';
        map[(x[i]+height/2)+1][(y[i]+width/2)] = '#';
        map[(x[i]+height/2)+1][(y[i]+width/2)+1] = '#';
        map[(x[i]+height/2)][(y[i]+width/2)-1] = '#';
        map[(x[i]+height/2)][(y[i]+width/2)+1] = '#';


        map[(x[i]+height/2)][(y[i]+width/2)] = '#';
    }

    int max_j;
    int min_j;

    max_j = 0;
    min_j = width+2;

    int max_i;
    int min_i;

    max_i = 0;
    min_i = height+2;

    for (int i = 0; i < height+2; i++)
    {
        for (int j = 0; j < width+2; j++)
        {



            if(zp[i][j]==1)
            {

                if(j<min_j)
                {
                    min_j = j;
                }
                if(j>max_j)
                {
                    max_j = j;
                }
            }

        }

    }

    for (int j = 0; j < width+2; j++)

    {
        for (int i = 0; i < height+2; i++)
        {

            if(zp[i][j]==1)
            {

                if(i<min_i)
                {
                    min_i = i;
                }
                if(i>max_i)
                {
                    max_i = i;
                }

            }

        }

    }



    // creating map for astar
    bool wall[(height+2)*(width+2)] = {false};

    for (int i = 0; i < height+2; ++i)
    {
        for (int j = 0; j < width+2; ++j)
        {
           std::cout << zp[i][j];
            wall[(i)+(j)+i*(width+2)] = zp[i][j];
        }
        std::cout << std::endl;
    }
    std::cout << std::endl;




    // Iitialize path vector
    std::vector< std::pair<int, int> > path;


   // execute A-star
   std::pair<int,int> start(0,465);
   std::pair<int,int> goal(210,0);



   find_path(path, wall, (height+2),(width+2), start, goal );

   std::cout << path.size();




   for(std::vector< std::pair<int, int> >::const_reverse_iterator i = path.rbegin(); i!= path.rend(); ++i)
   {
       std::cout<< "(" << i->first << ", " << i->second << ") ";
       std::cout<<map[i->first][i->second];
   }

    std::cout << "\n\n";



}

